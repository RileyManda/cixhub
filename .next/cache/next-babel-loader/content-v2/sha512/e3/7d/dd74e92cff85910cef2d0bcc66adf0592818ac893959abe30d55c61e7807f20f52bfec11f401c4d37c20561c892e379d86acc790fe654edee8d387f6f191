{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/rileymanda/Documents/dev/CixHub/cix_deploy/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  position: fixed;\\n  top: \", \"px;\\n  left: \", \"px;\\n  font-size: var(--fsize-2);\\n  font-weight: 700;\\n  letter-spacing: 0.02em;\\n  background-color: rgba(var(--color-\", \"-rgb, 0, 0, 0), 0.9);\\n  color: var(--color-\", \"-contrast, 255, 255, 255);\\n  pointer-events: none;\\n  padding: 7px 10px;\\n  border-radius: 4px;\\n  z-index: 99999;\\n  display: inline-block;\\n  white-space: nowrap;\\n  opacity: \", \";\\n  transition-property: transform, opacity !important;\\n  transition-duration: 0.06s !important;\\n  transition-timing-function: cubic-bezier(0, 0, 0.2, 1) !important;\\n  transition-delay: \", \"s !important;\\n  transform-origin: \", \";\\n  transform: scale(\", \");\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport styled from 'styled-components';\nimport React, { useState, useRef } from 'react';\nimport Portal from './Portal';\nvar StyledTooltip = styled.span.attrs(function (p) {\n  return {\n    bg: p.bg || 'dark',\n    delay: p.delay || 0.01\n  };\n})(_templateObject(), function (p) {\n  return p.posRef.current.y;\n}, function (p) {\n  return p.posRef.current.x;\n}, function (p) {\n  return p.bg;\n}, function (p) {\n  return p.bg;\n}, function (p) {\n  return p.show;\n}, function (p) {\n  return p.show ? p.delay : 0.02;\n}, function (p) {\n  return position(p.placment).negate();\n}, function (p) {\n  return p.show ? 1 : 0.7;\n});\n\nvar position = function position(p) {\n  return {\n    current: p,\n    negate: function negate() {\n      if (this.current === 'left') return 'right';\n      if (this.current === 'right') return 'left';\n      if (this.current === 'top') return 'bottom';\n      if (this.current === 'bottom') return 'top';\n    },\n    isHorizontal: function isHorizontal() {\n      return this.current === 'left' || this.current === 'right';\n    },\n    isVertical: function isVertical() {\n      return this.current === 'top' || this.current === 'bottom';\n    }\n  };\n};\n\nvar point = function point() {\n  return {\n    x: null,\n    y: null,\n    reset: function reset(p) {\n      this.x = p.x;\n      this.y = p.y;\n    },\n    restrictRect: function restrictRect(rect) {\n      if (this.x < rect.l) this.x = rect.l;else if (this.x > rect.r) this.x = rect.r;\n      if (this.y < rect.t) this.y = rect.t;else if (this.y > rect.b) this.y = rect.b;\n    }\n  };\n};\n\nvar getPoint = function getPoint(el, tt, placement, space) {\n  var recurCount = 0;\n  var pt = point();\n  var bdys = {\n    l: space,\n    t: space,\n    r: document.body.clientWidth - (tt.clientWidth + space),\n    b: window.innerHeight - (tt.clientHeight + space)\n  };\n  var elRect = el.getBoundingClientRect();\n  return function recursive(placement) {\n    recurCount++;\n    var pos = position(placement);\n\n    switch (pos.current) {\n      case 'left':\n        pt.x = elRect.left - (tt.offsetWidth + space);\n        pt.y = elRect.top + (el.offsetHeight - tt.offsetHeight) / 2;\n        break;\n\n      case 'right':\n        pt.x = elRect.right + space;\n        pt.y = elRect.top + (el.offsetHeight - tt.offsetHeight) / 2;\n        break;\n\n      case 'top':\n        pt.x = elRect.left + (el.offsetWidth - tt.offsetWidth) / 2;\n        pt.y = elRect.top - (tt.offsetHeight + space);\n        break;\n\n      default:\n        pt.x = elRect.left + (el.offsetWidth - tt.offsetWidth) / 2;\n        pt.y = elRect.bottom + space;\n    }\n\n    if (recurCount < 3) if (pos.isHorizontal() && (pt.x < bdys.l || pt.x > bdys.r) || pos.isVertical() && (pt.y < bdys.t || pt.y > bdys.b)) {\n      pt.reset(recursive(pos.negate()));\n    } // restrict to rect boundary\n\n    pt.restrictRect(bdys);\n    return pt;\n  }(placement);\n};\n\nfunction CustomTooltip(_ref) {\n  var text = _ref.text,\n      _ref$placement = _ref.placement,\n      placement = _ref$placement === void 0 ? 'bottom' : _ref$placement,\n      _ref$space = _ref.space,\n      space = _ref$space === void 0 ? 15 : _ref$space,\n      children = _ref.children,\n      _ref$disabled = _ref.disabled,\n      disabled = _ref$disabled === void 0 ? 0 : _ref$disabled,\n      delay = _ref.delay,\n      bg = _ref.bg;\n\n  var _useState = useState(0),\n      show = _useState[0],\n      setShow = _useState[1];\n\n  var posRef = useRef({\n    x: 0,\n    y: 0\n  });\n  var tooltipRef = useRef();\n\n  var handleMOver = function handleMOver(e) {\n    setShow(1);\n    posRef.current = getPoint(e.currentTarget, tooltipRef.current, placement, space);\n  };\n\n  var handleMOut = function handleMOut() {\n    return setShow(0);\n  };\n\n  return __jsx(React.Fragment, null, disabled ? children : /*#__PURE__*/React.cloneElement(children, {\n    onMouseOver: handleMOver,\n    onMouseOut: handleMOut\n  }), disabled || __jsx(StyledTooltip, {\n    delay: delay,\n    bg: bg,\n    ref: tooltipRef,\n    posRef: posRef,\n    show: show\n  }, text));\n}\n\nexport default CustomTooltip;","map":null,"metadata":{},"sourceType":"module"}